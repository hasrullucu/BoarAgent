'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.searchFlights = exports.getAirlineIcon = exports.getAirlines = exports.getLocationDump = exports.getLocationById = exports.searchLocationsByBox = exports.searchLocationsByRadius = exports.searchLocationsByTerm = undefined;

var _Object$freeze, _Object$freeze2;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

var _flightSearchParameterBuilder = require('./flightSearchParameterBuilder');

var _flightSearchParameterBuilder2 = _interopRequireDefault(_flightSearchParameterBuilder);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var locationTypeValues = Object.freeze((_Object$freeze = {}, _defineProperty(_Object$freeze, _constants.LOCATION_TYPES.AIRPORT, 'airport'), _defineProperty(_Object$freeze, _constants.LOCATION_TYPES.AUTONOMOUS_TERRITORY, 'autonomous_territory'), _defineProperty(_Object$freeze, _constants.LOCATION_TYPES.CITY, 'city'), _defineProperty(_Object$freeze, _constants.LOCATION_TYPES.COUNTRY, 'country'), _defineProperty(_Object$freeze, _constants.LOCATION_TYPES.SUBDIVISION, 'subdivision'), _Object$freeze));

var locationSortTypeValues = Object.freeze((_Object$freeze2 = {}, _defineProperty(_Object$freeze2, _constants.LOCATION_RESULTS_SORT_TYPES.ASCENDING_NAME, 'name'), _defineProperty(_Object$freeze2, _constants.LOCATION_RESULTS_SORT_TYPES.DESCENDING_NAME, '-name'), _defineProperty(_Object$freeze2, _constants.LOCATION_RESULTS_SORT_TYPES.ASCENDING_RANK, 'rank'), _defineProperty(_Object$freeze2, _constants.LOCATION_RESULTS_SORT_TYPES.DESCENDING_RANK, '-rank'), _Object$freeze2));

var paramsSerializer = function paramsSerializer(params) {
  return _qs2.default.stringify(params, { arrayFormat: 'repeat' });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/locations/locations-collection/search-by-query */

var searchLocationsByTerm = function searchLocationsByTerm(_ref) {
  var term = _ref.term,
      locale = _ref.locale,
      _ref$locationTypes = _ref.locationTypes,
      locationTypes = _ref$locationTypes === undefined ? [] : _ref$locationTypes,
      limit = _ref.limit;
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/locations', {
    params: {
      term: term,
      locale: locale,
      location_types: locationTypes.map(function (type) {
        return locationTypeValues[type];
      }),
      limit: limit
    },
    paramsSerializer: paramsSerializer
  }).then(function (response) {
    return response.data;
  });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/locations/locations-collection/search-by-radius */

var searchLocationsByRadius = function searchLocationsByRadius(_ref2) {
  var coordinate = _ref2.coordinate,
      radius = _ref2.radius,
      locale = _ref2.locale,
      _ref2$locationTypes = _ref2.locationTypes,
      locationTypes = _ref2$locationTypes === undefined ? [] : _ref2$locationTypes,
      limit = _ref2.limit,
      _ref2$sortTypes = _ref2.sortTypes,
      sortTypes = _ref2$sortTypes === undefined ? [] : _ref2$sortTypes;
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/locations', {
    params: {
      type: 'radius',
      lat: coordinate.latitude,
      lon: coordinate.longitude,
      radius: radius,
      locale: locale,
      location_types: locationTypes.map(function (type) {
        return locationTypeValues[type];
      }),
      limit: limit,
      sort: sortTypes.map(function (type) {
        return locationSortTypeValues[type];
      })
    },
    paramsSerializer: paramsSerializer
  }).then(function (response) {
    return response.data;
  });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/locations/locations-collection/search-by-box */

var searchLocationsByBox = function searchLocationsByBox(_ref3) {
  var lowCoordinate = _ref3.lowCoordinate,
      highCoordinate = _ref3.highCoordinate,
      locale = _ref3.locale,
      _ref3$locationTypes = _ref3.locationTypes,
      locationTypes = _ref3$locationTypes === undefined ? [] : _ref3$locationTypes,
      limit = _ref3.limit,
      _ref3$sortTypes = _ref3.sortTypes,
      sortTypes = _ref3$sortTypes === undefined ? [] : _ref3$sortTypes;
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/locations', {
    params: {
      type: 'box',
      low_lat: lowCoordinate.latitude,
      low_lon: lowCoordinate.longitude,
      high_lat: highCoordinate.latitude,
      high_lon: highCoordinate.longitude,
      locale: locale,
      location_types: locationTypes.map(function (type) {
        return locationTypeValues[type];
      }),
      limit: limit,
      sort: sortTypes.map(function (type) {
        return locationSortTypeValues[type];
      })
    },
    paramsSerializer: paramsSerializer
  }).then(function (response) {
    return response.data;
  });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/locations/locations-collection/get-by-id */

var getLocationById = function getLocationById(_ref4) {
  var id = _ref4.id,
      locale = _ref4.locale;
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/locations', {
    params: { type: 'id', id: id, locale: locale }
  }).then(function (response) {
    return response.data;
  });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/locations/locations-collection/get-dump */

var getLocationDump = function getLocationDump(_ref5) {
  var locale = _ref5.locale,
      _ref5$locationTypes = _ref5.locationTypes,
      locationTypes = _ref5$locationTypes === undefined ? [] : _ref5$locationTypes,
      limit = _ref5.limit,
      _ref5$sortTypes = _ref5.sortTypes,
      sortTypes = _ref5$sortTypes === undefined ? [] : _ref5$sortTypes;
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/locations', {
    params: {
      type: 'dump',
      locale: locale,
      location_types: locationTypes.map(function (type) {
        return locationTypeValues[type];
      }),
      limit: limit,
      sort: sortTypes.map(function (type) {
        return locationSortTypeValues[type];
      })
    },
    paramsSerializer: paramsSerializer
  }).then(function (response) {
    return response.data;
  });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/airlines/get */

var getAirlines = function getAirlines() {
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/airlines').then(function (response) {
    return response.data;
  });
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/airline-logos/get */

var getAirlineIcon = function getAirlineIcon(airlineCode) {
  return _axios2.default.get('https://images.kiwi.com/airlines/64/' + airlineCode + '.png');
};

/* https://skypickerpublicapi.docs.apiary.io/#reference/airline-logos/get */

var searchFlights = function searchFlights(_ref6) {
  var departureIdentifier = _ref6.departureIdentifier,
      arrivalIdentifier = _ref6.arrivalIdentifier,
      departureDateTimeRange = _ref6.departureDateTimeRange,
      returnDepartureDateTimeRange = _ref6.returnDepartureDateTimeRange,
      maximumHoursInFlight = _ref6.maximumHoursInFlight,
      passengerCount = _ref6.passengerCount,
      directFlightsOnly = _ref6.directFlightsOnly,
      currencyCode = _ref6.currencyCode,
      priceRange = _ref6.priceRange,
      maximumStopOverCount = _ref6.maximumStopOverCount,
      airlinesFilter = _ref6.airlinesFilter,
      partner = _ref6.partner,
      locale = _ref6.locale,
      offset = _ref6.offset,
      limit = _ref6.limit,
      sortType = _ref6.sortType;
  return _axios2.default.get(_constants.SKYPICKER_BASE_API_URL + '/flights', {
    params: (0, _flightSearchParameterBuilder2.default)({
      departureIdentifier: departureIdentifier,
      arrivalIdentifier: arrivalIdentifier,
      departureDateTimeRange: departureDateTimeRange,
      returnDepartureDateTimeRange: returnDepartureDateTimeRange,
      maximumHoursInFlight: maximumHoursInFlight,
      passengerCount: passengerCount,
      directFlightsOnly: directFlightsOnly,
      currencyCode: currencyCode,
      priceRange: priceRange,
      maximumStopOverCount: maximumStopOverCount,
      airlinesFilter: airlinesFilter,
      partner: partner,
      locale: locale,
      offset: offset,
      limit: limit,
      sortType: sortType
    }),
    paramsSerializer: paramsSerializer
  }).then(function (response) {
    return response.data;
  });
};

exports.searchLocationsByTerm = searchLocationsByTerm;
exports.searchLocationsByRadius = searchLocationsByRadius;
exports.searchLocationsByBox = searchLocationsByBox;
exports.getLocationById = getLocationById;
exports.getLocationDump = getLocationDump;
exports.getAirlines = getAirlines;
exports.getAirlineIcon = getAirlineIcon;
exports.searchFlights = searchFlights;