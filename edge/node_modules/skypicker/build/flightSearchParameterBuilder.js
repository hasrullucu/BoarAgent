'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Object$freeze;

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* https://momentjs.com/docs/#/displaying/format/ */

var DATE_FORMAT = 'DD/MM/YYYY';

var flightSortTypeValues = Object.freeze((_Object$freeze = {}, _defineProperty(_Object$freeze, _constants.FLIGHT_RESULTS_SORT_TYPES.DATE, 'date'), _defineProperty(_Object$freeze, _constants.FLIGHT_RESULTS_SORT_TYPES.DURATION, 'duration'), _defineProperty(_Object$freeze, _constants.FLIGHT_RESULTS_SORT_TYPES.PRICE, 'price'), _defineProperty(_Object$freeze, _constants.FLIGHT_RESULTS_SORT_TYPES.QUALITY, 'quality'), _Object$freeze));

var getFormattedDateTimeRange = function getFormattedDateTimeRange(range) {
  var formattedRange = {};

  if (range) {
    if (range.days) {
      if (range.days.start) {
        var startDate = (0, _momentTimezone2.default)(range.days.start, _momentTimezone2.default.ISO_8601);
        formattedRange.startDate = startDate.format(DATE_FORMAT);
      }

      if (range.days.end) {
        var endDate = (0, _momentTimezone2.default)(range.days.end, _momentTimezone2.default.ISO_8601);
        formattedRange.endDate = endDate.format(DATE_FORMAT);
      }
    }

    if (range.timeOfDay) {
      if (range.timeOfDay.start) {
        formattedRange.startTimeOfDay = range.timeOfDay.start;
      }

      if (range.timeOfDay.end) {
        formattedRange.endTimeOfDay = range.timeOfDay.end;
      }
    }
  }

  return formattedRange;
};

var buildFlightSearchParameters = function buildFlightSearchParameters(_ref) {
  var departureIdentifier = _ref.departureIdentifier,
      arrivalIdentifier = _ref.arrivalIdentifier,
      departureDateTimeRange = _ref.departureDateTimeRange,
      returnDepartureDateTimeRange = _ref.returnDepartureDateTimeRange,
      maximumHoursInFlight = _ref.maximumHoursInFlight,
      passengerCount = _ref.passengerCount,
      directFlightsOnly = _ref.directFlightsOnly,
      currencyCode = _ref.currencyCode,
      priceRange = _ref.priceRange,
      maximumStopOverCount = _ref.maximumStopOverCount,
      airlinesFilter = _ref.airlinesFilter,
      partner = _ref.partner,
      locale = _ref.locale,
      offset = _ref.offset,
      limit = _ref.limit,
      sortType = _ref.sortType;

  var parameters = {
    flyFrom: departureIdentifier,
    to: arrivalIdentifier,
    partner: partner,
    locale: locale,
    offset: offset,
    limit: limit,
    sort: flightSortTypeValues[sortType]
  };

  if (departureDateTimeRange) {
    var formattedDepartureDateTimeRange = getFormattedDateTimeRange(departureDateTimeRange);

    parameters.dateFrom = formattedDepartureDateTimeRange.startDate;
    parameters.dateTo = formattedDepartureDateTimeRange.endDate;
    parameters.dtimefrom = formattedDepartureDateTimeRange.startTimeOfDay;
    parameters.dtimeto = formattedDepartureDateTimeRange.endTimeOfDay;
  }

  if (returnDepartureDateTimeRange) {
    var formattedReturnDepartureDateTimeRange = getFormattedDateTimeRange(returnDepartureDateTimeRange);

    parameters.returnFrom = formattedReturnDepartureDateTimeRange.startDate;
    parameters.returnTo = formattedReturnDepartureDateTimeRange.endDate;
    parameters.returndtimefrom = formattedReturnDepartureDateTimeRange.startTimeOfDay;
    parameters.returndtimeto = formattedReturnDepartureDateTimeRange.endTimeOfDay;
  }

  if (maximumHoursInFlight) {
    parameters.maxFlyDuration = maximumHoursInFlight;
  }

  if (passengerCount) {
    parameters.passengers = passengerCount;
  }

  if (directFlightsOnly) {
    parameters.directFlights = 1;
  }

  if (currencyCode) {
    parameters.curr = currencyCode;
  }

  if (priceRange) {
    if (priceRange.start) {
      parameters.price_from = priceRange.start;
    }

    if (priceRange.end) {
      parameters.price_to = priceRange.end;
    }
  }

  if (maximumStopOverCount) {
    parameters.maxstopovers = maximumStopOverCount;
  }

  if (airlinesFilter) {
    if (airlinesFilter.airlines && airlinesFilter.type) {
      parameters.selectedAirlines = airlinesFilter.airlines.join(',');

      parameters.selectedAirlinesExclude = airlinesFilter.type === _constants.AIRLINES_FILTER_TYPE.EXCLUDE;
    }
  }

  return parameters;
};

exports.default = buildFlightSearchParameters;